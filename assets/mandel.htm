<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mandelbrot Zoom</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      touch-action: none;
      background-color: black;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    let width, height;
    const DPR = window.devicePixelRatio || 1;

    function resize() {
      width = window.innerWidth;
      height = window.innerHeight;
      canvas.width = width * DPR;
      canvas.height = height * DPR;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
      ctx.setTransform(DPR, 0, 0, DPR, 0, 0);
      draw();
    }

    window.addEventListener('resize', resize);
    resize();

    let offsetX = -0.5, offsetY = 0;
    let zoom = 1;
    let maxIter = 300;

    function draw() {
      const img = ctx.createImageData(width, height);
      const data = img.data;

      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          let zx = (x - width / 2) / (0.5 * zoom * width) + offsetX;
          let zy = (y - height / 2) / (0.5 * zoom * height) + offsetY;
          let i = maxIter;
          while (zx * zx + zy * zy < 4 && i > 0) {
            let tmp = zx * zx - zy * zy + offsetX;
            zy = 2.0 * zx * zy + offsetY;
            zx = tmp;
            i--;
          }

          const p = 4 * (y * width + x);
          const color = i === 0 ? 0 : 255 - (i * 255 / maxIter);
          data[p] = color;
          data[p + 1] = color;
          data[p + 2] = color;
          data[p + 3] = 255;
        }
      }
      ctx.putImageData(img, 0, 0);
    }

    // Desktop mouse-based zoom
    canvas.addEventListener('wheel', e => {
      e.preventDefault();
      const zoomFactor = e.deltaY < 0 ? 1.1 : 0.9;
      const mouseX = e.offsetX;
      const mouseY = e.offsetY;
      const x = (mouseX - width / 2) / (0.5 * zoom * width) + offsetX;
      const y = (mouseY - height / 2) / (0.5 * zoom * height) + offsetY;

      offsetX = x - (x - offsetX) / zoomFactor;
      offsetY = y - (y - offsetY) / zoomFactor;
      zoom *= zoomFactor;
      draw();
    }, { passive: false });

    // Mouse drag pan
    let isDragging = false;
    let lastX, lastY;

    canvas.addEventListener('mousedown', e => {
      isDragging = true;
      lastX = e.clientX;
      lastY = e.clientY;
    });

    window.addEventListener('mousemove', e => {
      if (!isDragging) return;
      const dx = e.clientX - lastX;
      const dy = e.clientY - lastY;
      lastX = e.clientX;
      lastY = e.clientY;

      offsetX -= dx / (0.5 * zoom * width);
      offsetY -= dy / (0.5 * zoom * height);
      draw();
    });

    window.addEventListener('mouseup', () => {
      isDragging = false;
    });

    // Touch pinch zoom and pan
    let lastTouchDist = null;
    let lastTouchMid = null;

    canvas.addEventListener('touchstart', e => {
      if (e.touches.length === 2) {
        const [a, b] = e.touches;
        lastTouchDist = Math.hypot(b.clientX - a.clientX, b.clientY - a.clientY);
        lastTouchMid = {
          x: (a.clientX + b.clientX) / 2,
          y: (a.clientY + b.clientY) / 2
        };
      } else if (e.touches.length === 1) {
        lastX = e.touches[0].clientX;
        lastY = e.touches[0].clientY;
      }
    }, { passive: false });

    canvas.addEventListener('touchmove', e => {
      e.preventDefault();
      if (e.touches.length === 2 && lastTouchDist !== null) {
        const [a, b] = e.touches;
        const dist = Math.hypot(b.clientX - a.clientX, b.clientY - a.clientY);
        const mid = {
          x: (a.clientX + b.clientX) / 2,
          y: (a.clientY + b.clientY) / 2
        };
        const zoomFactor = dist / lastTouchDist;

        const x = (mid.x - width / 2) / (0.5 * zoom * width) + offsetX;
        const y = (mid.y - height / 2) / (0.5 * zoom * height) + offsetY;

        offsetX = x - (x - offsetX) / zoomFactor;
        offsetY = y - (y - offsetY) / zoomFactor;
        zoom *= zoomFactor;
        lastTouchDist = dist;
        lastTouchMid = mid;
        draw();
      } else if (e.touches.length === 1) {
        const touch = e.touches[0];
        const dx = touch.clientX - lastX;
        const dy = touch.clientY - lastY;
        lastX = touch.clientX;
        lastY = touch.clientY;
        offsetX -= dx / (0.5 * zoom * width);
        offsetY -= dy / (0.5 * zoom * height);
        draw();
      }
    }, { passive: false });

    canvas.addEventListener('touchend', e => {
      if (e.touches.length < 2) {
        lastTouchDist = null;
        lastTouchMid = null;
      }
    });
  </script>
</body>
</html>