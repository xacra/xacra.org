<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mandelbrot Set</title>
  <style>
    body { margin: 0; overflow: hidden; background: black; display: flex; align-items: center; justify-content: center; height: 100vh; }

    canvas
    {
        cursor: grab;
    }

    #zoomHud
    {
      position: absolute;
      margin: 0;
      bottom: 10px;
      right: 10px;
      width: 300px;
      height: 36px;
      font-family: monospace;
      line-height: 12px;
      font-size: 9px;
      color: white;
      background: rgba(0, 0, 0, 0.5);
      text-align: left;
      padding: 10px;
      border: 1px solid hsla(0,0%,50%,0.5);
      border-radius: 3px;
      outline: none;
      overflow: hidden;
      resize: none;
    }
  </style>
</head>
<body>
  <canvas id="glCanvas"></canvas>
  <textarea id="zoomHud"></textarea>
  <script>

    document.canvas = document.getElementById("glCanvas");

    const canvas = document.canvas;
    const gl = canvas.getContext("webgl2");


    if (!gl)
    {
        alert("WebGL2 is not supported by your browser.");
        throw new Error("WebGL2 not supported.");
    };


    const square = ( (window.innerWidth >= window.innerHeight) ? window.innerWidth : window.innerHeight );

    // const offset = { x:0, y: 0 };
    //
    //
    // if ( window.innerWidth > window.innerHeight )
    // {
    //     offset.y = ( (window.innerWidth - window.innerHeight) / 2 );
    // }
    // else if ( window.innerWidth < window.innerHeight )
    // {
    //     offset.x = ( (window.innerHeight - window.innerWidth) / 2 );
    // };


    canvas.width = square;
    canvas.height = square;
    canvas.style.width = `${square}px`;
    canvas.style.height = `${square}px`;

    canvas.hud = document.getElementById("zoomHud");
    canvas.center = { x:-0.5, y:0 };
    canvas.toward = { x:0, y:0 };

    Object.assign( canvas.hud, {hidden:false, toggle ()
    {
        this.hidden = !this.hidden;
        this.style.display = ( this.hidden ? "none" : "block" );
        return this;
    }})
    .toggle();


    gl.viewport(0, 0, square, square);

    // Shared vertex shader for both passes.
    const vertexShaderSource = `#version 300 es
    in vec4 a_position;
    out vec2 v_uv;
    void main() {
      v_uv = a_position.xy * 0.5 + 0.5;
      gl_Position = a_position;
    }`;

    // First pass: Mandelbrot fractal rendering.
    // We modify the mapping from iterations to brightness by applying a zoom‐dependent exponent.
    const fractalFragmentShaderSource = `#version 300 es
    precision highp float;
    in vec2 v_uv;
    out vec4 fragColor;
    uniform vec2 u_resolution;
    uniform vec2 u_center;
    uniform float u_zoom;

    void main(){
      // Map pixel to complex plane.
      vec2 uv = (v_uv * 2.0 - 1.0);
      vec2 c = u_center + uv * (1.0 / u_zoom);
      vec2 z = c;
      int iterations = 0;
      int maxIterations = int(300.0 + log(u_zoom) * 200.0);

      while(dot(z, z) < 4.0 && iterations < maxIterations) {
          z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
          iterations++;
      }

      // Normalize the iteration count.
      float normIter = float(iterations) / float(maxIterations);
      // Compute a zoom-based exponent.
      // When zoom is low, exponent is 1 (linear mapping). As u_zoom increases, exponent decreases (e.g., down to ~0.5),
      // causing a stronger boost in brightness for pixels with high iteration counts.
      float exponent = mix(1.0, 0.5, clamp((log(u_zoom) - 1.0) / 15.0, 0.0, 1.0));
      float t = pow(normIter, exponent);

      // Base color gradient (you can adjust these numbers).
      vec3 color = vec3(0.01 + 0.65 * t, 0.01 + 0.59 * t, 0.01 + 1.7 * t);

      fragColor = vec4(color, 1.0);
    }`;

    // Second pass: Post processing to add rayburst effect.
    // We enhance the ray sampling weight according to zoom while leaving the overall background unchanged.
    const postFragmentShaderSource = `#version 300 es
    precision highp float;
    in vec2 v_uv;
    out vec4 fragColor;
    uniform sampler2D u_scene;
    uniform vec2 u_resolution;
    uniform vec2 u_lightPos; // in UV coordinates (0 to 1)
    uniform float u_zoom;

    void main(){
      vec2 uv = v_uv;
      vec2 deltaTexCoord = uv - u_lightPos;
      const int samples = 300;
      float decay = 0.98;
      float exposure = 0.99;
      float baseWeight = 0.01;
      // Compute a zoom-based boost for the rayburst effect.
      float rayBoost = 1.0 + clamp((log(u_zoom) - 1.0) / 10.0, 0.0, 1.0);
      vec4 illuminationDecay = vec4(1.0);
      vec4 color = texture(u_scene, uv);
      vec2 texCoord = uv;

      // Accumulate samples along the ray from the light source.
      for (int i = 0; i < samples; i++) {
          texCoord -= deltaTexCoord / float(samples);
          vec4 sampleColor = texture(u_scene, texCoord);
          sampleColor *= baseWeight * rayBoost * illuminationDecay;
          color += sampleColor;
          illuminationDecay *= decay;
      }
      fragColor = vec4(color.rgb * exposure, 1.0);
    }`;

    function createShader(gl, type, source) {
      const shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          console.error(gl.getShaderInfoLog(shader));
          gl.deleteShader(shader);
          return null;
      }
      return shader;
    }

    function createProgram(gl, vertexShader, fragmentShader) {
      const program = gl.createProgram();
      gl.attachShader(program, vertexShader);
      gl.attachShader(program, fragmentShader);
      gl.linkProgram(program);
      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          console.error(gl.getProgramInfoLog(program));
          gl.deleteProgram(program);
          return null;
      }
      return program;
    }

    // Create shader programs.
    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fractalFragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fractalFragmentShaderSource);
    const fractalProgram = createProgram(gl, vertexShader, fractalFragmentShader);
    const postFragmentShader = createShader(gl, gl.FRAGMENT_SHADER, postFragmentShaderSource);
    const postProgram = createProgram(gl, vertexShader, postFragmentShader);

    // Create a fullscreen quad.
    const quadBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      -1, -1,   1, -1,  -1,  1,
      -1,  1,   1, -1,   1,  1
    ]), gl.STATIC_DRAW);

    // Setup framebuffer for offscreen rendering.
    const fbo = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    const fboTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, fboTexture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, square, square, 0,
                  gl.RGBA, gl.UNSIGNED_BYTE, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fboTexture, 0);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    let isPanning = false;
    let lastX = 0, lastY = 0, diffX = 0, diffY = 0, moveX = 0, moveY = 0, calcZ;
    let zoom = 1;
    const minZoom = 1, maxZoom = 300000;


    function render()
    {
      // First pass: render Mandelbrot fractal (with enhanced fine detail) to offscreen texture.
      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
      gl.viewport(0, 0, square, square);
      gl.useProgram(fractalProgram);
      gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
      const posLoc = gl.getAttribLocation(fractalProgram, "a_position");
      gl.enableVertexAttribArray(posLoc);
      gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);
      const resLoc = gl.getUniformLocation(fractalProgram, "u_resolution");
      const centerLoc = gl.getUniformLocation(fractalProgram, "u_center");
      const zoomLoc = gl.getUniformLocation(fractalProgram, "u_zoom");

      // if ( !isPanning )
      // {
      //     canvas.toward.x *= 0.99;
      //     canvas.toward.y *= 0.99;
      //     canvas.center.x += canvas.toward.x;
      //     canvas.center.y += canvas.toward.y;
      // };

      gl.uniform2f(resLoc, square, square);
      gl.uniform2f(centerLoc, canvas.center.x, canvas.center.y);
      gl.uniform1f(zoomLoc, zoom);
      gl.drawArrays(gl.TRIANGLES, 0, 6);

      // Second pass: apply god ray effect with zoom-based enhancement.
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.viewport(0, 0, square, square);
      gl.useProgram(postProgram);
      gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
      const posLocPost = gl.getAttribLocation(postProgram, "a_position");
      gl.enableVertexAttribArray(posLocPost);
      gl.vertexAttribPointer(posLocPost, 2, gl.FLOAT, false, 0, 0);
      const resLocPost = gl.getUniformLocation(postProgram, "u_resolution");
      gl.uniform2f(resLocPost, square, square);
      // Set the god ray light source at the center (UV = 0.5, 0.5)
      const lightPosLoc = gl.getUniformLocation(postProgram, "u_lightPos");
      gl.uniform2f(lightPosLoc, 0.5, 0.5);
      // Pass the current zoom value to the post shader.
      const zoomLocPost = gl.getUniformLocation(postProgram, "u_zoom");
      gl.uniform1f(zoomLocPost, zoom);

      const sceneLoc = gl.getUniformLocation(postProgram, "u_scene");
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, fboTexture);
      gl.uniform1i(sceneLoc, 0);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
    }



    function updateHUD() {
      let p = ([ zoom, canvas.center.x, canvas.center.y ]).map((n) => {
        n = n.toFixed(48);
        while (n.endsWith("0")) { n = n.slice(0, -1); }
        if (n.endsWith(".")) { n += "0"; }
        if (!n.startsWith("-")) { n = ("+" + n); }
        return n;
      });

      // if ( canvas.hud.hidden )
      // { return };

      canvas.hud.textContent = `X ${p[1]}\nY ${p[2]}\nZ ${p[0]}`;
    }



    canvas.addEventListener("wheel", (event) => {
      event.preventDefault();
      const scale = event.deltaY > 0 ? 1.05 : 0.95;
      zoom = Math.min(Math.max(zoom * scale, minZoom), maxZoom);
      updateHUD();
      render();
    });



    canvas.addEventListener("mousedown", (event) => {
      isPanning = true;
      lastX = event.clientX;
      lastY = event.clientY;
      canvas.style.cursor = "grabbing";
    });



    canvas.addEventListener("mousemove", (event) =>
    {
        calcZ = ( 2 / zoom );
        diffX = ( event.clientX - lastX );
        diffY = ( event.clientY - lastY );

        moveX = ( (diffX / square * calcZ) * -1 );
        moveY = ( diffY / square * calcZ );

        lastX = event.clientX;
        lastY = event.clientY;

        if ( !isPanning )
        { return }

        canvas.center.x += moveX;
        canvas.center.y += moveY;

        updateHUD();
        render();

    });



    canvas.addEventListener("mouseup", () =>
    {
      isPanning = false;
      canvas.style.cursor = "grab";
      // window.top.document.focus();
    });



    canvas.addEventListener("mouseleave", () =>
    {
      isPanning = false;
      canvas.style.cursor = "grab";
    });


    window.addEventListener("keydown", (detail) =>
    {
        window.top.Device.signal("keydown",detail);
        // window.top.document.signal("keydown",event);
    });



    // const ext =
    // {
    //     Z: zoom,
    //     X: Y,
    //     Y: canvas.center.y,
    // };


    Object.assign
    (
        canvas,
        {
            config: ( intake="" )=>
            {
                let values = {};


                if ( (typeof intake) === "string" )
                {
                    ( intake || canvas.hud.textContent ).trim().split("\n").map(( parted )=>
                    {
                        parted = parted.trim().split(" ");

                        if ( !!parted[1] )
                        { values[parted[0]] = (parted[1] * 1) };
                    });


                    if ( !intake )
                    { return values };
                }
                else
                {
                    values = intake;
                };


                canvas.center.x = values.X;
                canvas.center.y = values.Y;
                zoom = values.Z;

                updateHUD();
                render();
            }
        }
    );



    updateHUD();
    render();
  </script>
</body>
</html>
